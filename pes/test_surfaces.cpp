#include <cmath>
#include <math.h>
#include <functional>

#include <chrono>
#include <thread>
#include <random>

#include "pes.h"
#include "test_surfaces.h"
#include "../common.h"

using namespace std::this_thread;
using namespace std::chrono;

std::random_device rd_delay;
std::mt19937 gen_delay(rd_delay());

// Muller-Brown surface
double Muller_Brown::calculate_energy(double* position, std::string name_space){
    double x = position[0];
    double y = position[1];

    double ai[] = {-200.0, -100.0, -170.0, 15.0};
    double bi[] = {-1.0, -1.0, -6.5, 0.7};
    double ci[] = {0.0, 0.0, 11.0, 0.6};
    double di[] = {-10.0, -10.0, -6.5, 0.7};

    double xi[] = {1.0, 0.0, -0.5, -1.0};
    double yi[] = {0.0, 0.5, 1.5, 1.0};

    double total = 0.0;
    for (int i = 0; i < 4; i++) {
        total += ai[i] * exp(bi[i] * (x - xi[i]) * (x - xi[i]) + ci[i] * (x - xi[i]) * (y - yi[i]) + di[i] * (y - yi[i]) * (y - yi[i]));
    }

    if (ADD_DELAYS) {
      std::normal_distribution<double> rand_real(MEAN_ENERGY_EVAL_TIME, STD_ENERGY_EVAL_TIME);
      double delay_time = rand_real(gen_delay);
      sleep_for(nanoseconds((int)(delay_time * 1.0e9)));
    }

    return total;
}

double* Muller_Brown::calculate_gradient(double* position, std::string name_space){
    double x = position[0];
    double y = position[1];
    double* gradient = new double[2];

    double ai[] = {-200.0, -100.0, -170.0, 15.0};
    double bi[] = {-1.0, -1.0, -6.5, 0.7};
    double ci[] = {0.0, 0.0, 11.0, 0.6};
    double di[] = {-10.0, -10.0, -6.5, 0.7};

    double xi[] = {1.0, 0.0, -0.5, -1.0};
    double yi[] = {0.0, 0.5, 1.5, 1.0};

    gradient[0] = 0.0;
    gradient[1] = 0.0;
    for (int i = 0; i < 4; i++) {
        gradient[0] += ai[i] * exp(bi[i] * (x - xi[i]) * (x - xi[i]) + ci[i] * (x - xi[i]) * (y - yi[i]) + di[i] * (y - yi[i]) * (y - yi[i])) * (2 * bi[i] * (x - xi[i]) + ci[i] * (y - yi[i]));
        gradient[1] += ai[i] * exp(bi[i] * (x - xi[i]) * (x - xi[i]) + ci[i] * (x - xi[i]) * (y - yi[i]) + di[i] * (y - yi[i]) * (y - yi[i])) * (2 * di[i] * (y - yi[i]) + ci[i] * (x - xi[i]));
    }

    if (ADD_DELAYS) {
      std::normal_distribution<double> rand_real(MEAN_GRAD_EVAL_TIME, STD_GRAD_EVAL_TIME);
      double delay_time = rand_real(gen_delay);
      sleep_for(nanoseconds((int)(delay_time * 1.0e9)));
    }

    return gradient;
}

Muller_Brown::Muller_Brown (double* lower_bounds_in, double* upper_bounds_in): PotentialEnergySurface(2, lower_bounds_in, upper_bounds_in){}

Muller_Brown::Muller_Brown (): PotentialEnergySurface(){}


double Halgren_Lipscomb::calculate_energy(double* position, std::string name_space){
    double x = position[0];
    double y = position[1];

    if (ADD_DELAYS) {
      std::normal_distribution<double> rand_real(MEAN_ENERGY_EVAL_TIME, STD_ENERGY_EVAL_TIME);
      double delay_time = rand_real(gen_delay);
      sleep_for(nanoseconds((int)(delay_time * 1.0e9)));
    }
    
    return pow((x - y) * (x - y) - 5.0/3.0 * 5.0/3.0, 2) + 4 * (x * y - 4) * (x * y - 4) + x - y;
}

double* Halgren_Lipscomb::calculate_gradient(double* position, std::string name_space) {
    double x = position[0];
    double y = position[1];
    double* gradient = new double[2];
    gradient[0] = 2 * ((x - y) * (x - y) - 5.0/3.0 * 5.0/3.0) * (x - y) + 8 * (x * y - 4) * y + 1;
    gradient[1] = -2 * ((x - y) * (x - y) - 5.0/3.0 * 5.0/3.0) * (x - y) + 8 * (x * y - 4) * x - 1;
    
    if (ADD_DELAYS) {
      std::normal_distribution<double> rand_real(MEAN_GRAD_EVAL_TIME, STD_GRAD_EVAL_TIME);
      double delay_time = rand_real(gen_delay);
      sleep_for(nanoseconds((int)(delay_time * 1.0e9)));
    }
    
    return gradient;
}

Halgren_Lipscomb::Halgren_Lipscomb (double* lower_bounds_in, double* upper_bounds_in): PotentialEnergySurface(2, lower_bounds_in, upper_bounds_in){}

Halgren_Lipscomb::Halgren_Lipscomb (): PotentialEnergySurface(){}


double Quapp_Wolfe_Schlegel::calculate_energy(double* position, std::string name_space) {
    double x = position[0];
    double y = position[1];

    if (ADD_DELAYS) {
      std::normal_distribution<double> rand_real(MEAN_ENERGY_EVAL_TIME, STD_ENERGY_EVAL_TIME);
      double delay_time = rand_real(gen_delay);
      sleep_for(nanoseconds((int)(delay_time * 1.0e9)));
    }
	
    return pow(x, 4) + pow(y, 4) - 2 * x*x - 4 * y*y + x * y + 0.2 * x + 0.1 * y;
}

double* Quapp_Wolfe_Schlegel::calculate_gradient(double* position, std::string name_space) {
    double x = position[0];
    double y = position[1];
    double* gradient = new double[2];
    gradient[0] = 4 * pow(x, 3) - 4 * x + y + 0.3;
    gradient[1] = 4 * pow(y, 3) - 8 * y + x + 0.1;

    if (ADD_DELAYS) {
      std::normal_distribution<double> rand_real(MEAN_GRAD_EVAL_TIME, STD_GRAD_EVAL_TIME);
      double delay_time = rand_real(gen_delay);
      sleep_for(nanoseconds((int)(delay_time * 1.0e9)));
    }
    
    return gradient;
}

Quapp_Wolfe_Schlegel::Quapp_Wolfe_Schlegel (double* lower_bounds_in, double* upper_bounds_in): PotentialEnergySurface(2, lower_bounds_in, upper_bounds_in){}

Quapp_Wolfe_Schlegel::Quapp_Wolfe_Schlegel (): PotentialEnergySurface(){}


double Culot_Dive_Nguyen_Ghuysen::calculate_energy(double* position, std::string name_space) {
    double x = position[0];
    double y = position[1];

    if (ADD_DELAYS) {
      std::normal_distribution<double> rand_real(MEAN_ENERGY_EVAL_TIME, STD_ENERGY_EVAL_TIME);
      double delay_time = rand_real(gen_delay);
      sleep_for(nanoseconds((int)(delay_time * 1.0e9)));
    }
    
    return pow(x*x + y - 11, 2) + pow(x + y*y - 7, 2);
    // return (x*x + y - 11) * (x*x + y - 11) + (x + y*y - 7) * (x + y*y - 7);

}

double* Culot_Dive_Nguyen_Ghuysen::calculate_gradient(double* position, std::string name_space) {
    double x = position[0];
    double y = position[1];
    double* gradient = new double[2];
    gradient[0] = 4 * x * (x*x + y - 11) + 2 * ( x + y*y - 7);
    gradient[1] = 2 * (x*x + y - 11) + 4 * y * ( x + y*y - 7);
    
    if (ADD_DELAYS) {
      std::normal_distribution<double> rand_real(MEAN_GRAD_EVAL_TIME, STD_GRAD_EVAL_TIME);
      double delay_time = rand_real(gen_delay);
      sleep_for(nanoseconds((int)(delay_time * 1.0e9)));
    }
    
    return gradient;
}

Culot_Dive_Nguyen_Ghuysen::Culot_Dive_Nguyen_Ghuysen (double* lower_bounds_in, double* upper_bounds_in): PotentialEnergySurface(2, lower_bounds_in, upper_bounds_in){}

Culot_Dive_Nguyen_Ghuysen::Culot_Dive_Nguyen_Ghuysen (): PotentialEnergySurface(){}


//3D_Point_Sources
double Point_Sources::calculate_energy(double* position, std::string name_space) {
    double x = position[0];
    double y = position[1];
    double z = position[2];

    if (ADD_DELAYS) {
      std::normal_distribution<double> rand_real(MEAN_ENERGY_EVAL_TIME, STD_ENERGY_EVAL_TIME);
      double delay_time = rand_real(gen_delay);
      sleep_for(nanoseconds((int)(delay_time * 1.0e9)));
    }
    
    return -exp( -( pow((x + 1), 2) + pow(y, 2) + pow(z, 2) ) ) - exp( -( pow((x - 1), 2) + pow(y, 2) + pow(z, 2) ) );

}

double* Point_Sources::calculate_gradient(double* position, std::string name_space) {
    double x = position[0];
    double y = position[1];
    double z = position[2];

    double* gradient = new double[3];
    gradient[0] = 2*(x-1)*exp( -( pow((x - 1), 2) + pow(y, 2) + pow(z, 2) ) ) + 2*(x+1)*exp( -( pow((x + 1), 2) + pow(y, 2) + pow(z, 2) ) );
    gradient[1] = 2 * y * exp( -( pow((x - 1), 2) + pow(y, 2) + pow(z, 2) ) ) + 2 * y * exp( -( pow((x + 1), 2) + pow(y, 2) + pow(z, 2) ) );
    gradient[2] = 2 * z * exp( -( pow((x - 1), 2) + pow(y, 2) + pow(z, 2) ) ) + 2 * z * exp( -( pow((x + 1), 2) + pow(y, 2) + pow(z, 2) ) );
    
    if (ADD_DELAYS) {
      std::normal_distribution<double> rand_real(MEAN_GRAD_EVAL_TIME, STD_GRAD_EVAL_TIME);
      double delay_time = rand_real(gen_delay);
      sleep_for(nanoseconds((int)(delay_time * 1.0e9)));
    }
    
    return gradient;
}

Point_Sources::Point_Sources (double* lower_bounds_in, double* upper_bounds_in): PotentialEnergySurface(3, lower_bounds_in, upper_bounds_in){}

Point_Sources::Point_Sources (): PotentialEnergySurface(){}


double Custom_Gaussian::calculate_energy(double *position, std::string name_space) {
	double x = position[0];
	double y = position[1];

	double As[32] = {-30.205253993631196, -20.022129206599804, -42.43286760440729, -24.488000376985298,
          -16.38178502506924, -17.931659970449473, -30.172687867231787, -25.769765482329085,
          -34.59404185546781, -45.57505912843033, -38.16563302713016, -28.034344300656088,
          -20.891549415761254, -34.312155865769114, -33.39881120712339, -19.19473437486114,
          -16.71738116255264, -46.63256494822467, -39.794827702634194, -42.82053432374118,
          -15.635807642667956, -16.709495942812985, -21.272484277695902, -29.30137489514817,
          -33.116265508423226, -38.003060751763186, -23.054128768670022, -49.73803237924367,
          -34.26923262274106, -33.728651306846615, -47.714241889677, -18.274674558276732};

    double xos[32] = {2.6215623694253836, 1.9980209183151225, 0.8046236220265942, 5.345531191556564,
           3.484451329004145, 3.76427721181411, 3.464584936551692, 6.522318729642946,
           3.9430511508814328, 0.8622269732974823, 0.18828370329337502, 5.662984794715073,
           6.638268482227703, 0.05361155321837309, 2.1567971256434197, 6.630245472523514,
           6.482754414476277, 5.194477558182123, 3.5340281376772493, 1.7831630072987896,
           1.6727259991055288, 2.8573999395612613, 4.155770641850253, 0.2824296949648277,
           6.906047307984611, 2.6247148334458674, 4.908560450805521, 4.935138031554453,
           3.0116107367670932, 4.301861220528249, 5.066577354415495, 5.7081045495998035};

    double yos[32] = {2.1087399463292322, 1.7185060808091608, 3.685616729673359, 0.9015054892296878,
           3.9034613848553543, 2.4046776136219226, 0.44394661100813193, 3.492904168688485,
           3.772611442157638, 0.5915605965312896, 5.236356834257642, 4.666297415769863,
           0.7283370914029826, 6.332786788672153, 5.756582027080056, 1.1266097874800982,
           5.812512782415781, 2.175038173598125, 3.9121051539632634, 4.08909368771177,
           6.08805554493429, 6.476677552365661, 2.6067435146254776, 5.372661168202783,
           1.6616094641361974, 4.860005422491781, 0.11466475882564396, 4.484541189220203,
           5.818549284349848, 6.238848305863168, 6.930756176264225, 2.664930861278311};

    double sigxs[32] = {0.2911656314425136, 0.4691130404784409, 0.7396747576463751, 0.6433880144199259,
             0.5909373096731572, 0.6322752791483168, 0.32412159443916283, 0.4951936022459547,
             0.47789017265910283, 0.6122852231645772, 0.6183325785635645, 0.527027383205543,
             0.48559196388877485, 0.4568484804928763, 0.6011021719280183, 0.5104885333662409,
             0.4067942213014912, 0.681923449202003, 0.5629544963112261, 0.42000967001760536,
             0.6741707385305671, 0.727903748315411, 0.6928721866676995, 0.2846185524146084,
             0.5087515840220862, 0.6903884536586957, 0.7301799534700948, 0.704144239940449,
             0.5970295550984543, 0.662995768592828, 0.4122201521372674, 0.7268597145520569};

    double sigys[32] = {0.4331051248265698, 0.2846084349782931, 0.5860790358931132, 0.5293792624478825,
             0.45694555168254414, 0.45213335584286085, 0.38269824172578876, 0.5191566645053056,
             0.2832823138232842, 0.38368209979396223, 0.4809118165455592, 0.43587068456112604,
             0.6959718433848018, 0.42056921316290635, 0.3210091420087929, 0.7349475418728201,
             0.7154978469500543, 0.4185300207474009, 0.5225846530087397, 0.2703262405519922,
             0.3939390828090635, 0.6857847547792397, 0.2709592227738668, 0.41485433110739656,
             0.4494215685461199, 0.7415811492424093, 0.4032122595147482, 0.741140180160017,
             0.6351697337382068, 0.5719958711961134, 0.5318618504689429, 0.5295739338766623};

    double total = 0.0;

	for (int i = 0; i < 32; i++) {
		total += As[i] * exp(-1 * ((x - xos[i])* (x - xos[i])/(2 * sigxs[i] * sigxs[i]) + (y - yos[i])*pow(y - yos[i])/(2 * sigys[i]*sigys[i])));
	}

	return total;
}

double* Custom_Gaussian::calculate_gradient(double *position, std::string name_space) {
    double x = position[0];
    double y = position[1];
    double* gradient = new double[2];

	gradient[0] = -34.3121558657691*(0.256870375240987 - 4.79132500031645*x)*exp(-2.39566250015822*pow(x - 0.0536115532183731, 2) - 2.82679977736506*pow(y - 6.33278678867215, 2))
			- 38.1656330271302*(0.492457179639058 - 2.61550612732391*x)*exp(-1.30775306366195*pow(x - 0.188283703293375, 2) - 2.16191745373787*pow(y - 5.23635683425764, 2))
			- 42.4328676044073*(1.47065628127831 - 1.82775678095827*x)*exp(-0.913878390479136*pow(x - 0.804623622026594, 2) - 1.45565223166159*pow(y - 3.68561672967336, 2))
			- 45.5750591284303*(2.299926981695 - 2.66742638878393*x)*exp(-1.33371319439196*pow(x - 0.862226973297482, 2) - 3.39646331310237*pow(y - 0.59156059653129, 2))
			- 29.3013748951482*(3.48645405209406 - 12.3445024168873*x)*exp(-6.17225120844365*pow(x - 0.282429694964828, 2) - 2.90521814067456*pow(y - 5.37266116820278, 2))
			- 15.635807642668*(3.68031515400235 - 2.20019008251821*x)*exp(-1.10009504125911*pow(x - 1.67272599910553, 2) - 3.22189858038413*pow(y - 6.08805554493429, 2))
			- 16.709495942813*(5.39290934281428 - 1.88734844854877*x)*exp(-0.943674224274383*pow(x - 2.85739993956126, 2) - 1.06314953013038*pow(y - 6.47667755236566, 2))
			- 38.0030607517632*(5.50674652939222 - 2.09803612157084*x)*exp(-1.04901806078542*pow(x - 2.62471483344587, 2) - 0.909185793519364*pow(y - 4.86000542249178, 2))
			- 33.3988112071234*(5.96915287538408 - 2.76760053340824*x)*exp(-1.38380026670412*pow(x - 2.15679712564342, 2) - 4.85216099842227*pow(y - 5.75658202708006, 2))
			- 34.2692326227411*(8.44903628455045 - 2.80548750255165*x)*exp(-1.40274375127583*pow(x - 3.01161073676709, 2) - 1.23933984725155*pow(y - 5.81854928434985, 2))
			- 21.2724842776959*(8.65655941749019 - 2.083021457035*x)*exp(-1.0415107285175*pow(x - 4.15577064185025, 2) - 6.81023547388424*pow(y - 2.60674351462548, 2))
			- 20.0221292065998*(9.07914640564564 - 4.54406974542681*x)*exp(-2.2720348727134pow(x - 1.99802091831512, 2) - 6.17269004623486*pow(y - 1.71850608080916, 2))
			- 23.05412876867*(9.20649523578953 - 1.87559984807332*x)*exp(-0.937799924036658*pow(x - 4.90856045080552, 2) - 3.07540664173319*pow(y - 0.114664758825644, 2))
			- 17.9316599704495*(9.41605950968773 - 2.50142563362114*x)*exp(-1.25071281681057*pow(x - 3.76427721181411, 2) - 2.44588992612284*pow(y - 2.40467761362192, 2))
			- 33.7286513068466*(9.78666860457069 - 2.27498473401913*x)*exp(-1.13749236700957*pow(x - 4.30186122052825, 2) - 1.52821414942897*pow(y - 6.23884830586317, 2))
			- 49.7380323792437*(9.95350506996623 - 2.01686457528142*x)*exp(-1.00843228764071*pow(x - 4.93513803155445, 2) - 0.910268023596335*pow(y - 4.4845411892202, 2))
			- 16.3817850250692*(9.97818568147744 - 2.86363181440367*x)*exp(-1.43181590720184*pow(x - 3.48445132900414, 2) - 2.39464476354944*pow(y - 3.90346138485535, 2))
			- 42.8205343237412*(10.1081683649326 - 5.66867320797824*x)*exp(-2.83433660398912*pow(x - 1.78316300729879, 2) - 6.84216581774671*pow(y - 4.08909368771177, 2))
			- 18.2746745582767*(10.8041528743037 - 1.89277417405768*x)*exp(-0.946387087028842*pow(x - 5.7081045495998, 2) - 1.78285820137*pow(y - 2.66493086127831, 2))
			- 39.7948277026342*(11.1512465658166 - 3.15539269394322*x)*exp(-1.57769634697161*pow(x - 3.53402813767725, 2) - 1.83086659751275*pow(y - 3.91210515396326, 2))
			- 46.6325649482247*(11.1704488660307 - 2.15044703551284*x)*exp(-1.07522351775642*pow(x - 5.19447755818212, 2) - 2.85441276193782*pow(y - 2.17503817359813, 2))
			- 24.4880003769853*(12.9135288034292 - 2.41576156618944*x)*exp(-1.20788078309472*pow(x - 5.34553119155656, 2) - 1.78416968216732*pow(y - 0.901505489229688, 2))
			- 34.5940418554678*(17.2653827857486 - 4.37868597821488*x)*exp(-2.18934298910744*pow(x - 3.94305115088143, 2) - 6.23061738072084*pow(y - 3.77261144215764, 2))
			- 28.0343443006561*(20.3882069825756 - 3.60025811858134*x)*exp(-1.80012905929067*pow(x - 5.66298479471507, 2) - 2.63181091158373*pow(y - 4.66629741576986, 2))
			- 19.1947343748611*(25.4423735599954 - 3.8373200005085*x)*exp(-1.91866000025425*pow(x - 6.63024547252351, 2) - 0.925672412870916*pow(y - 1.1266097874801, 2))
			- 25.7697654823291*(26.5981828769739 - 4.07802561933828*x)*exp(-2.03901280966914*pow(x - 6.52231872964295, 2) - 1.85512482590657*pow(y - 3.49290416868849, 2))
			- 33.1162655084232*(26.6819766747959 - 3.8635670282691*x)*exp(-1.93178351413455*pow(x - 6.90604730798461, 2) - 2.47549573272851*pow(y - 1.6616094641362, 2))
			- 20.8915494157613*(28.152167085955 - 4.24089009977909*x)*exp(-2.12044504988955*pow(x - 6.6382684822277, 2) - 1.03225421406792*pow(y - 0.728337091402983, 2))
			- 47.714241889677*(29.8164709304928 - 5.88493352509616*x)*exp(-2.94246676254808*pow(x - 5.06657735441549, 2) - 1.76755250704855*pow(y - 6.93075617626423, 2))
			- 30.2052539936312*(30.9228827307198 - 11.7955929988031*x)*exp(-5.89779649940157*pow(x - 2.62156236942538, 2) - 2.66552867569302*pow(y - 2.10873994632923, 2))
			- 30.1726878672318*(32.9788326979989 - 9.51884087183696*x)*exp(-4.75942043591848*pow(x - 3.46458493655169, 2) - 3.4139493262919*pow(y - 0.443946611008132, 2))
			- 16.7173811625526*(39.1750915168815 - 6.04297016549043*x)*exp(-3.02148508274521*pow(x - 6.48275441447628, 2) - 0.976682355348977*pow(y - 5.81251278241578, 2));

	gradient[1] = -23.05412876867*(0.70528152173024 - 6.15081328346638*y)*exp(-0.937799924036658*pow(x - 4.90856045080552, 2) - 3.07540664173319*pow(y - 0.114664758825644, 2)) 
			- 20.8915494157613*(1.5036580637254 - 2.06450842813584*y)*exp(-2.12044504988955*pow(x - 6.6382684822277, 2) - 1.03225421406792*pow(y - 0.728337091402983, 2))
			- 19.1947343748611*(2.08574320068139 - 1.85134482574183*y)*exp(-1.91866000025425*pow(x - 6.63024547252351, 2) - 0.925672412870916*pow(y - 1.1266097874801, 2))
			- 30.1726878672318*(3.03122246712156 - 6.82789865258379*y)*exp(-4.75942043591848*pow(x - 3.46458493655169, 2) - 3.4139493262919*pow(y - 0.443946611008132, 2))
			- 24.4880003769853*(3.21687752438205 - 3.56833936433464*y)*exp(-1.20788078309472*pow(x - 5.34553119155656, 2) - 1.78416968216732*pow(y - 0.901505489229688, 2)) 
			- 45.5750591284303*(4.01842772719096 - 6.79292662620474*y)*exp(-1.33371319439196*pow(x - 0.862226973297482, 2) - 3.39646331310237*pow(y - 0.59156059653129, 2)) 
			- 49.7380323792437*(8.16426889009567 - 1.82053604719267*y)*exp(-1.00843228764071*pow(x - 4.93513803155445, 2) - 0.910268023596335*pow(y - 4.4845411892202, 2)) 
			- 33.1162655084232*(8.22661427586093 - 4.95099146545702*y)*exp(-1.93178351413455*pow(x - 6.90604730798461, 2) - 2.47549573272851*pow(y - 1.6616094641362, 2))
			- 38.0030607517632*(8.8372957731132 - 1.81837158703873*y)*exp(-1.04901806078542*pow(x - 2.62471483344587, 2) - 0.909185793519364*pow(y - 4.86000542249178, 2)) 
			- 18.2746745582767*(9.50238768422813 - 3.56571640274001*y)*exp(-0.946387087028842*pow(x - 5.7081045495998, 2) - 1.78285820137*pow(y - 2.66493086127831, 2)) 
			- 42.4328676044073*(10.7299524351967 - 2.91130446332319*y)*exp(-0.913878390479136*pow(x - 0.804623622026594, 2) - 1.45565223166159*pow(y - 3.68561672967336, 2)) 
			- 30.2052539936312*(11.2418135930399 - 5.33105735138604*y)*exp(-5.89779649940157*pow(x - 2.62156236942538, 2) - 2.66552867569302*pow(y - 2.10873994632923, 2)) 
			- 16.7173811625526*(11.3539573496518 - 1.95336471069795*y)*exp(-3.02148508274521*pow(x - 6.48275441447628, 2) - 0.976682355348977*pow(y - 5.81251278241578, 2))
			- 17.9316599704495*(11.7631535014619 - 4.89177985224568*y)*exp(-1.25071281681057*pow(x - 3.76427721181411, 2) - 2.44588992612284*pow(y - 2.40467761362192, 2)) 
			- 46.6325649482247*(12.4169134408408 - 5.70882552387564*y)*exp(-1.07522351775642*pow(x - 5.19447755818212, 2) - 2.85441276193782*pow(y - 2.17503817359813, 2)) 
			- 25.7697654823291*(12.9595464756931 - 3.71024965181313*y)*exp(-2.03901280966914*pow(x - 6.52231872964295, 2) - 1.85512482590657*pow(y - 3.49290416868849, 2)) 
			- 16.709495942813*(13.7713533932071 - 2.12629906026076*y)*exp(-0.943674224274383*pow(x - 2.85739993956126, 2) - 1.06314953013038*pow(y - 6.47667755236566, 2))
			- 39.7948277026342*(14.3250853046976 - 3.66173319502549*y)*exp(-1.57769634697161*pow(x - 3.53402813767725, 2) - 1.83086659751275*pow(y - 3.91210515396326, 2)) 
			- 34.2692326227411*(14.4223199625835 - 2.47867969450309*y)*exp(-1.40274375127583*pow(x - 3.01161073676709, 2) - 1.23933984725155*pow(y - 5.81854928434985, 2)) 
			- 16.3817850250692*(18.6948067299227 - 4.78928952709889*y)*exp(-1.43181590720184*pow(x - 3.48445132900414, 2) - 2.39464476354944*pow(y - 3.90346138485535, 2)) 
			- 33.7286513068466*(19.0685925143221 - 3.05642829885793*y)*exp(-1.13749236700957*pow(x - 4.30186122052825, 2) - 1.52821414942897*pow(y - 6.23884830586317, 2)) 
			- 20.0221292065998*(21.2156107588096 - 12.3453800924697*y)*exp(-2.2720348727134*pow(x - 1.99802091831512, 2) - 6.17269004623486*pow(y - 1.71850608080916, 2))
			- 38.1656330271302*(22.6411424679624 - 4.32383490747575*y)*exp(-1.30775306366195*pow(x - 0.188283703293375, 2) - 2.16191745373787*pow(y - 5.23635683425764, 2)) 
			- 47.714241889677*(24.5009509101961 - 3.5351050140971*y)*exp(-2.94246676254808*pow(x - 5.06657735441549, 2) - 1.76755250704855*pow(y - 6.93075617626423, 2)) 
			- 28.0343443006561*(24.5616249110361 - 5.26362182316745*y)*exp(-1.80012905929067*pow(x - 5.66298479471507, 2) - 2.63181091158373*pow(y - 4.66629741576986, 2)) 
			- 29.3013748951482*(31.217505379121 - 5.81043628134912*y)*exp(-6.17225120844365*pow(x - 0.282429694964828, 2) - 2.90521814067456*pow(y - 5.37266116820278, 2)) 
			- 21.2724842776959*(35.5050743092402 - 13.6204709477685*y)*exp(-1.0415107285175*pow(x - 4.15577064185025, 2) - 6.81023547388424*pow(y - 2.60674351462548, 2)) 
			- 34.3121558657691*(35.8030405686377 - 5.65359955473012*y)*exp(-2.39566250015822*pow(x - 0.0536115532183731, 2) - 2.82679977736506*pow(y - 6.33278678867215, 2)) 
			- 15.635807642668*(39.230195035047 - 6.44379716076826*y)*exp(-1.10009504125911*pow(x - 1.67272599910553, 2) - 3.22189858038413*pow(y - 6.08805554493429, 2)) 
			- 34.5940418554678*(47.0113968444274 - 12.4612347614417*y)*exp(-2.18934298910744*pow(x - 3.94305115088143, 2) - 6.23061738072084*pow(y - 3.77261144215764, 2)) 
			- 33.3988112071234*(55.863725592033 - 9.70432199684455*y)*exp(-1.38380026670412*pow(x - 2.15679712564342, 2) - 4.85216099842227*pow(y - 5.75658202708006, 2)) 
			- 42.8205343237412*(55.9565141112506 - 13.6843316354934*y)*exp(-2.83433660398912*pow(x - 1.78316300729879, 2) - 6.84216581774671*pow(y - 4.08909368771177, 2));

	return gradient;
}

Custom_Gaussian::Custom_Gaussian(double *lower_bounds_in, double *upper_bounds_in) : PotentialEnergySurface(2, lower_bounds_in, upper_bounds_in){}
Custom_Gaussian::Custom_Gaussian() : PotentialEnergySurface();